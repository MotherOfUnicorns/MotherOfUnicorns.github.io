<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yun&#39;s attic</title>
    <link>https://yunli.nl/</link>
    <description>Recent content on yun&#39;s attic</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 10 Apr 2021 16:45:20 +0200</lastBuildDate>
    <atom:link href="https://yunli.nl/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Works by Liu Cixin</title>
      <link>https://yunli.nl/reading-notes/2021-04-10-liu_cixin/</link>
      <pubDate>Sat, 10 Apr 2021 16:45:20 +0200</pubDate>
      <guid>https://yunli.nl/reading-notes/2021-04-10-liu_cixin/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve never been the biggest fan of &lt;a href=&#34;https://en.wikipedia.org/wiki/Liu_Cixin&#34;&gt;Liu Cixin&lt;/a&gt;,
even though he&amp;rsquo;s often heralded as &amp;ldquo;the best sci-fi author in China&amp;rdquo;.
He does (sometimes) demonstrate interesting ideas by combining scientific concepts and imagination,
but in my opinion that&amp;rsquo;s not quite enough to be a good sci-fi story.
In particular,
these two elements in his writings always leave me feeling irritated,
if not downright angry:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Helpless female characters with a &amp;ldquo;pure&amp;rdquo; mind (and body)&lt;/p&gt;
&lt;p&gt;I can accept it if the men are always the hero &amp;mdash;
that&amp;rsquo;s not uncommon in most fiction, especially from his time.
But I cannot accept how women are depicted in his stories:
silly, helpless, and they just don&amp;rsquo;t really do anything apart from waiting and hoping and praying.
All his female characters seem to come straight from the damsel in distress trope,
with little thoughts or desires of their own.&lt;/p&gt;
&lt;p&gt;Interestingly, in &lt;a href=&#34;https://www.goodreads.com/book/show/49247266-to-hold-up-the-sky&#34;&gt;this translated version&lt;/a&gt;,
the hero in a few of the stories have the opposite gender as compared to the original Chinese stories:
e.g. &lt;em&gt;The Time Migration&lt;/em&gt;.
I guess the translator is tired of this gender stereotype as well!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Corruption? What corruption!&lt;/p&gt;
&lt;p&gt;Liu often set his stories against a backdrop that&amp;rsquo;s somewhat reminiscient of the typical communist China:
the people are suffering,
the system is not working,
and yet there&amp;rsquo;s still rampant corruption.&lt;/p&gt;
&lt;p&gt;The heros of this stories recognize this corruption and wants to make a difference,
but in the end they still go along with the corrupted ways because that&amp;rsquo;s the only way to move forward for the &amp;ldquo;greater good&amp;rdquo;.
There is some serious mental gymnastics happening:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is not working, and I want to fix it!&lt;/li&gt;
&lt;li&gt;But that would mean bringing changes to a lot of people!&lt;/li&gt;
&lt;li&gt;There&amp;rsquo;s no way other people can accept changes!&lt;/li&gt;
&lt;li&gt;So I better stick to how things work now!&lt;/li&gt;
&lt;li&gt;Now I&amp;rsquo;ll also be praised by my boss/elder, because accepting the reality shows that I&amp;rsquo;m being mature!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;ve witnessed this in my life under many different circumstances,
and I&amp;rsquo;m still incapable of this mental gymnastics.
Guess who&amp;rsquo;s not mature :-/.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Maybe it was his intention to irritate his readers to make them reflect and confront the reality,
but I highly doubt that.
For me it&amp;rsquo;s more likely that this is just him being true to his heart.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Totoros</title>
      <link>https://yunli.nl/sketchbook/2021-03-29_totoros/</link>
      <pubDate>Mon, 29 Mar 2021 18:01:56 +0200</pubDate>
      <guid>https://yunli.nl/sketchbook/2021-03-29_totoros/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://yunli.nl/sketchbook/2021-03-29_totoros.jpg&#34; alt=&#34;Totoros&#34; title=&#34;Totoros&#34;&gt;&lt;/p&gt;
&lt;p&gt;Totoros, watercolour&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Slaughterhouse-Five</title>
      <link>https://yunli.nl/reading-notes/2021-03-12-slaughterhouse-five/</link>
      <pubDate>Fri, 12 Mar 2021 16:36:27 +0100</pubDate>
      <guid>https://yunli.nl/reading-notes/2021-03-12-slaughterhouse-five/</guid>
      <description>&lt;h3 id=&#34;_slaughterhouse-five_-by-kurt-vonnegut-jrhttpswwwgoodreadscombookshow4981slaughterhouse_five&#34;&gt;&lt;a href=&#34;https://www.goodreads.com/book/show/4981.Slaughterhouse_Five&#34;&gt;&lt;em&gt;Slaughterhouse-Five&lt;/em&gt; by Kurt Vonnegut Jr.&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I picked up a random book by Kurt Vonnegut Jr.,
expecting a science-fiction type of story,
but instead got a book about war.&lt;/p&gt;
&lt;p&gt;I never liked books or movies about war,
they glorify it by telling stories of heroes and their gallantry,
whereas the dead sidekicks and other collateral damages barely constitute an afterthought.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d hate to be such a sidekick,
and hate it even more if I were such a hero.&lt;/p&gt;
&lt;p&gt;War is so ridiculously pointless and painful,
and it always happens because somehow people are lead to think that wars can solve problems.
I&amp;rsquo;m not a student of history or of the human psyche,
but it seems to me that at every chance where an in-group/out-group distinction can be made,
someone will inevitably feel the need to assert the superiority of their own group identity,
by launching wars of some form.
What&amp;rsquo;s especially sad is most often people never actually try to get to know know the other side, the human beings they are trying to persecute.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;I also just realised that I&amp;rsquo;ve read a lot more stories about WW2 from the perspective of Europeans and Americans than stories from Asia-Pacific,
even though the war there lasted longer and is no less gruesome.&lt;/p&gt;
&lt;p&gt;I can&amp;rsquo;t recall any Chinese book that tries to combine personal experience of the war with some elements of fiction
(I&amp;rsquo;m sure they exist, but just somehow never crossed my path),
or any other book that tries to uncover the futility of war.
Maybe at that point in China wars of different shapes and forms had been going on for too long and desensitised the people living through them.
Also I think part of the reason is there was never any serious,
deep-level reconciliation between China and Japan,
and on the other hand the current government in China is more than happy to exploit this piece of history for their &amp;ldquo;patriotic education&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve also never explored Korean or south-east Asian literatures so I know very little about what happened there.
And I also don&amp;rsquo;t know how Japan as a country feels about that period,
but maybe these books can shed some light - I&amp;rsquo;ll read them later:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/book/show/50021008-memoirs-of-a-kamikaze&#34;&gt;Memoirs of a Kamikaze: A World War II Pilot&amp;rsquo;s Inspiring Story of Survival, Honor and Reconciliation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/book/show/37569315-thirty-minutes-over-oregon&#34;&gt;Thirty Minutes Over Oregon: A Japanese Pilot&amp;rsquo;s World War II Story&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Ham on Rye</title>
      <link>https://yunli.nl/reading-notes/2021-02-07-ham_on_rye/</link>
      <pubDate>Sun, 07 Feb 2021 18:36:27 +0100</pubDate>
      <guid>https://yunli.nl/reading-notes/2021-02-07-ham_on_rye/</guid>
      <description>&lt;h3 id=&#34;_ham-on-rye_-by-charles-bukowskihttpswwwgoodreadscombookshow38501ham_on_rye&#34;&gt;&lt;a href=&#34;https://www.goodreads.com/book/show/38501.Ham_on_Rye&#34;&gt;&lt;em&gt;Ham on Rye&lt;/em&gt; by Charles Bukowski&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ve been curious about the writings of Charles Bukowski for a while,
mostly because of his dirty, subversive style.&lt;/p&gt;
&lt;p&gt;This story delivers just that:
a straight punch to the gut
(there are many punches thrown in the book, both figurative and literal),
packed with the hopelessness and disillusionment of being an outsider,
and the rage of man against machine.&lt;/p&gt;
&lt;p&gt;Among the many themes explored in the story,
the one that resonated the most with me is how an individual can be totally powerless against the institution and the society at large.
And the violence always makes me shudder.
I don&amp;rsquo;t like violence, and wish it gone.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lessons Learned from RC2020</title>
      <link>https://yunli.nl/blogs/2021-02-02lessons_learned_rc2020/</link>
      <pubDate>Tue, 02 Feb 2021 20:56:27 +0100</pubDate>
      <guid>https://yunli.nl/blogs/2021-02-02lessons_learned_rc2020/</guid>
      <description>&lt;p&gt;I took part in the recently-finished &lt;a href=&#34;https://paperswithcode.com/rc2020&#34;&gt;ML Reproducibility Challenge 2020&lt;/a&gt;, and &lt;a href=&#34;https://github.com/MotherOfUnicorns/FACT_AI_project&#34;&gt;together with a great team&lt;/a&gt; we attempted to reproduce one of the papers as part of a course assignment.&lt;/p&gt;
&lt;p&gt;This is just my attempt to get back to blogging, as well as writing down some lessons learned.
It&amp;rsquo;s by no means a criticism of anything, but lately I&amp;rsquo;ve realised if I don&amp;rsquo;t write things down I&amp;rsquo;ll most likely forget all about it in two or three months.&lt;/p&gt;
&lt;p&gt;Short story is, we couldn&amp;rsquo;t completely reproduce the original paper results. From my limited sample size of talking to and listening to presentations of my fellow students participating in this challenge, it seems like it&amp;rsquo;s quite common to &lt;em&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;/em&gt; be able to reproduce a paper&amp;rsquo;s results completely, not in four weeks at least. That&amp;rsquo;s not as optimistic as I had thought.&lt;/p&gt;
&lt;p&gt;In a way my group already had a head start, because the paper we tried to reproduce already came with some pretty extensive code, nuts and bolts included.
But after scrolling through pages after pages, we realised this code is adapted from another paper, so there are a lot of dangling variables and unfinished experiments hidden inside, and at times this could be really confusing.&lt;/p&gt;
&lt;p&gt;Being the overachieving students that we are, in the very beginning of our reproducibility study we were already thinking about the million different ways we could test this model or examine the authors&#39; claims under more general settings.
But training these babies is slow, so it&amp;rsquo;s quite easy to get discouraged by the progress.
Then I felt somewhat swamped in discussions that were mostly speculation rather than factually grounded.
That coupled with (almost) midnight zoom meetings was definitely not helpful for my sleep quality.&lt;/p&gt;
&lt;p&gt;Overall the experience was a very rewarding one, and I want to try to summarise what I observed/learned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Document your code.&lt;/li&gt;
&lt;li&gt;Remove the bits in your code that you don&amp;rsquo;t actually use.&lt;/li&gt;
&lt;li&gt;Test your code. Don&amp;rsquo;t write one thing and your code is actually doing another (wildly different thing).&lt;/li&gt;
&lt;li&gt;At my previous job they made sure we read this book: &lt;a href=&#34;https://www.goodreads.com/book/show/3735293-clean-code&#34;&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;, or at least get the gist of it. I think that&amp;rsquo;s a pretty good idea, even if you&amp;rsquo;re &amp;ldquo;just a data guy/gal/person&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Optimise your code so it doesn&amp;rsquo;t take an insane amount of time (1.5 days! on a NVIDIA 1080 Ti) to train a not-grossly-complex model.&lt;/li&gt;
&lt;li&gt;Related to the previous point, make sure you&amp;rsquo;re not fine-tuning parameters that you don&amp;rsquo;t actually want to change, such as embeddings, unless that&amp;rsquo;s your intention.&lt;/li&gt;
&lt;li&gt;If the dataset only has a train/test split, and you would also want a dev split, it&amp;rsquo;s better to shave it off from the test part rather than train part, otherwise you might overfit your model because your train set and dev set is too similar/correlated.&lt;/li&gt;
&lt;li&gt;Train a model and evaluate multiple times with different seeds to make sure you&amp;rsquo;re not just getting lucky with your results.&lt;/li&gt;
&lt;li&gt;Report your hyper-parameters.&lt;/li&gt;
&lt;li&gt;Report your complete results (in an appendix or supplementary materials), don&amp;rsquo;t cherry-pick or leave the impression of cherry-picking your results just to support your claim.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s probably not a good idea to use the same metric to evaluate different datasets/tasks. An accuracy improvement from 65% to 67% is not as awe-inspiring as an improvement from 95% to 97%.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t speculate before you get your results from the experiments (talking to myself right now :D). It&amp;rsquo;s easier to come up with one plan after you have solid results than to have ten contingency plans before seeing any actual numbers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I actually think the scientific community would be much happier and we&amp;rsquo;d be making much better progress as a whole if we all publish &amp;ldquo;failed&amp;rdquo; experiments rather than just those shiny ones.
Knowing what will not work and what not to do is, in my opinion, much more helpful for gaining new insights and coming up with new ideas to experiment with.&lt;/p&gt;
&lt;p&gt;Maybe we need to start a negative-arXiv to host the dumb, the unglorious and the unprestigious.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Recipes</title>
      <link>https://yunli.nl/recipes/</link>
      <pubDate>Fri, 04 Dec 2020 14:12:14 +0200</pubDate>
      <guid>https://yunli.nl/recipes/</guid>
      <description>&lt;p&gt;You can find some of the recipes I collected &lt;a href=&#34;http://yunli.nl/recipes/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Bon appétit!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Autumn 2020 II</title>
      <link>https://yunli.nl/sketchbook/2020-10-25_autumn2/</link>
      <pubDate>Sun, 25 Oct 2020 22:01:56 +0200</pubDate>
      <guid>https://yunli.nl/sketchbook/2020-10-25_autumn2/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://yunli.nl/sketchbook/2020-10-25_autumn2.png&#34; alt=&#34;Autumn 2020 II&#34; title=&#34;Autumn 2020 II&#34;&gt;&lt;/p&gt;
&lt;p&gt;Autumn 2020 II, watercolour&lt;/p&gt;
&lt;p&gt;Autumn 2020 is still an autumn.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Autumn 2020 I</title>
      <link>https://yunli.nl/sketchbook/2020-10-25_autumn1/</link>
      <pubDate>Sun, 25 Oct 2020 22:01:55 +0200</pubDate>
      <guid>https://yunli.nl/sketchbook/2020-10-25_autumn1/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://yunli.nl/sketchbook/2020-10-25_autumn1.png&#34; alt=&#34;Autumn 2020 I&#34; title=&#34;Autumn 2020 I&#34;&gt;&lt;/p&gt;
&lt;p&gt;Autumn 2020 I, watercolour&lt;/p&gt;
&lt;p&gt;Autumn 2020 is still an autumn.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rough Estimate: When to go back to school?</title>
      <link>https://yunli.nl/blogs/2020-09-26-rough_estimate_when_to_go_to_school/</link>
      <pubDate>Sat, 26 Sep 2020 22:20:55 +0200</pubDate>
      <guid>https://yunli.nl/blogs/2020-09-26-rough_estimate_when_to_go_to_school/</guid>
      <description>&lt;p&gt;I was very excited to go back to school to once again bask in the glory of education and inch closer to becoming a virtuous woman.
But the gods have not been kind, and more importantly, the humans have not been able enough to trust and be trusted and keep the virus at bay through concerted efforts.
So even though I really miss the chance to meet people and talk to them once a week, I&amp;rsquo;ve decided to stay at home and avoid university campuses for a while.
Especially since &lt;a href=&#34;https://www.rivm.nl/documenten/wekelijkse-update-epidemiologische-situatie-covid-19-in-nederland&#34;&gt;my age group has the highest infection rate right now&lt;/a&gt;.
You never know.&lt;/p&gt;
&lt;p&gt;That said, I also want to know: in the (near?) future, when can I go back to school?&lt;/p&gt;
&lt;p&gt;There must be a number &amp;ndash; a magical indicator &amp;ndash; that will signal my return.&lt;/p&gt;
&lt;p&gt;I thought I would start with the infection rate, or perhaps the rate of positively tested cases daily as an estimate of how many people around me are infected.
But not everyone getting tested will be roaming the street, so it&amp;rsquo;s not likely that I will encounter them.
Also a person who&amp;rsquo;s feeling completely fine is probably less interested in getting their brain swabbed.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s too many twists and turns to reason about. I needed something rough.
So here&amp;rsquo;s another thought: every day there are more people tested positive. Over a short period (say 3 days) this number does not (yet) fluctuate very wildly.
So why not use the number of daily new cases as a substitute for people carrying the virus that are roaming the streets 3 days ago?
And to take it further, why no use the number of daily new cases as a substitute for people carrying the virus that are roaming the streets now?&lt;/p&gt;
&lt;p&gt;Many problems with this assumption exist, true. But it&amp;rsquo;s the most readily available number.&lt;/p&gt;
&lt;p&gt;Next, the classic i.i.d. assumption: that everyone in the country are equally likely to carry the virus, and one person&amp;rsquo;s chance of being infected has no influence on others (say their family members or friends with whom they meet often).&lt;/p&gt;
&lt;p&gt;Another bad assumption! But why not, this is a rough estimate.&lt;/p&gt;
&lt;p&gt;The rest of the things fall into place very quickly.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;s&lt;/code&gt; is the number of daily new cases, &lt;code&gt;P&lt;/code&gt; the total population of the country/province/whatever, &lt;code&gt;N&lt;/code&gt; the number of people I meet/share a room with every time I venter out of my home into the university campus, then the probability of no one I meet is carrying the virus is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(1 - s/P)^N
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So the probability of at least one person is carrying the virus is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 - (1 - s/P)^N
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If I accept at most &lt;code&gt;a = 0.1%&lt;/code&gt; risk of meeting someone who carries the virus, then I can formulate it as&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 - (1 - s/P)^N &amp;lt;= a
    (1 - s/P)^N &amp;gt;= 1 - a
        1 - s/P &amp;gt;= (1 - a)^(1/N)
            s/P &amp;lt;= 1 - (1 - a)^(1/N)
              s &amp;lt;= P(1 - (1 - a)^(1/N))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Since I&amp;rsquo;m meeting about 20 people every time, for the &lt;a href=&#34;https://en.wikipedia.org/wiki/Demography_of_the_Netherlands&#34;&gt;population in the Netherlands&lt;/a&gt; and my appetite for risk, that works out to &lt;code&gt;s = 850&lt;/code&gt;.
Compared to the &lt;a href=&#34;https://www.rivm.nl/en/novel-coronavirus-covid-19/current-information&#34;&gt;almost 3000 cases&lt;/a&gt; a day now, I can stay at home for a bit longer.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s pretty conservative, but I remember getting pneumonia as a kid, not a good feeling.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m sure there are much better epidemiology models that can give you a smarter estimate.
But I am now a committed woman (to homework and group projects) so a rough estimate will have to suffice.&lt;/p&gt;
&lt;p&gt;I do hope that day comes soon.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dissociate II</title>
      <link>https://yunli.nl/sketchbook/2020-09-10_dissociate2/</link>
      <pubDate>Thu, 10 Sep 2020 23:56:55 +0200</pubDate>
      <guid>https://yunli.nl/sketchbook/2020-09-10_dissociate2/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://yunli.nl/sketchbook/2020-09-10_dissociate2.jpg&#34; alt=&#34;Dissociate II&#34; title=&#34;Dissociate II&#34;&gt;&lt;/p&gt;
&lt;p&gt;Dissociate II, watercolour&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dissociate I</title>
      <link>https://yunli.nl/sketchbook/2020-08-23_dissociate1/</link>
      <pubDate>Sun, 23 Aug 2020 19:56:55 +0200</pubDate>
      <guid>https://yunli.nl/sketchbook/2020-08-23_dissociate1/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://yunli.nl/sketchbook/2020-08-23_dissociate1.jpg&#34; alt=&#34;Dissociate I&#34; title=&#34;Dissociate I&#34;&gt;&lt;/p&gt;
&lt;p&gt;Dissociate I, watercolour&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Waking Up with rtcwake and crontab</title>
      <link>https://yunli.nl/blogs/2020-08-17_waking_up_with_rtcwake_and_crontab/</link>
      <pubDate>Mon, 17 Aug 2020 21:19:46 +0200</pubDate>
      <guid>https://yunli.nl/blogs/2020-08-17_waking_up_with_rtcwake_and_crontab/</guid>
      <description>&lt;p&gt;I have a couple of scripts that I&amp;rsquo;d like to run at night, but I also want to leave my machine suspended to RAM overnight to conserve energy (and reduce noise, the fan is a beast!). So this is just a note for myself about how I went about it this time, using &lt;code&gt;rtcwake&lt;/code&gt; and &lt;code&gt;crontab&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the crontab I originally had, which is triggered once a day in the afternoon:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;59 15 * * *  /some/bash/script.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But now I want to run it at night, when I&amp;rsquo;m not around my computer, which like me is probably also asleep. So I need to make sure the machine is in an awake state just before the cron jobs are scheduled to be executed.&lt;/p&gt;
&lt;p&gt;Some minutes of DuckDuckGo later I found &lt;a href=&#34;https://www.man7.org/linux/man-pages/man8/rtcwake.8.html&#34;&gt;&lt;code&gt;rtcwake&lt;/code&gt;&lt;/a&gt;, which uses the hardware clock on the motherboard to send a signal to wake up the machine at desired time. Sounds like exactly what I need.&lt;/p&gt;
&lt;p&gt;So now my crontab becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1  4 * * *  sudo rtcwake -m no -t $(date +\%s -d &amp;quot;tomorrow 03:55&amp;quot;)
59 3 * * * /some/bash/script.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Some explanations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rtcwake&lt;/code&gt; needs root permission, hence the &lt;code&gt;sudo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;-m no&lt;/code&gt; flag only sets an alert to wake up the machine. If the machine is already awake, nothing will change.&lt;/li&gt;
&lt;li&gt;The main idea is to start a cycle: &lt;code&gt;rtcwake&lt;/code&gt; wakes up the machine (03:55) a few minutes before the scheduled cron job (03:59), and then another cron job (04:01) uses &lt;code&gt;rtcwake&lt;/code&gt; to set up the next alert for tomorrow.&lt;/li&gt;
&lt;li&gt;After everything is done, the machine will go to sleep after 30 minutes according to some other energy saving settings I have.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I waited for one night, but it did not work as I expected (it&amp;rsquo;s the first-time-never-works-law).&lt;/p&gt;
&lt;p&gt;Because &lt;code&gt;rtcwake&lt;/code&gt; requires root permission, it needs the root password when that cron job is run. But given it&amp;rsquo;s a bad idea to store root passwords anywhere it&amp;rsquo;s better to use root&amp;rsquo;s crontab instead of the one owned by the user. In other words, it would be two separate crontabs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;with &lt;code&gt;sudo crontab -e&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1  4 * * *  sudo rtcwake -m no -t $(date +\%s -d &amp;quot;tomorrow 03:55&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;with your regular &lt;code&gt;crontab -e&lt;/code&gt; (of course, this can also be run under root&amp;rsquo;s crontab, but I don&amp;rsquo;t want to clutter that up):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;59 3 * * * /some/bash/script.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Et voilà, it&amp;rsquo;s as sweet as a dream, pun intended.&lt;/p&gt;
&lt;p&gt;The only issue is if your machine restarts during the day and failed to run the crontab containing &lt;code&gt;rtcwake&lt;/code&gt;, you&amp;rsquo;ll have to do it manually once to get the cycle started.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Another Random Portrait</title>
      <link>https://yunli.nl/sketchbook/2020-08-08_portrait/</link>
      <pubDate>Sat, 08 Aug 2020 21:56:55 +0200</pubDate>
      <guid>https://yunli.nl/sketchbook/2020-08-08_portrait/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://yunli.nl/sketchbook/2020-08-08_portrait.jpg&#34; alt=&#34;Another Random Portrait&#34; title=&#34;Another Random Portrait&#34;&gt;&lt;/p&gt;
&lt;p&gt;Another Random Portrait, watercolour&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mauve</title>
      <link>https://yunli.nl/sketchbook/2020-08-07_mauve/</link>
      <pubDate>Fri, 07 Aug 2020 21:54:05 +0200</pubDate>
      <guid>https://yunli.nl/sketchbook/2020-08-07_mauve/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://yunli.nl/sketchbook/2020-08-07_mauve.jpg&#34; alt=&#34;Mauve&#34; title=&#34;Mauve&#34;&gt;&lt;/p&gt;
&lt;p&gt;Mauve, watercolour&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Wine</title>
      <link>https://yunli.nl/sketchbook/2020-08-06_wine/</link>
      <pubDate>Thu, 06 Aug 2020 22:02:11 +0200</pubDate>
      <guid>https://yunli.nl/sketchbook/2020-08-06_wine/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://yunli.nl/sketchbook/2020-08-06_wine.jpg&#34; alt=&#34;Wine&#34; title=&#34;Wine&#34;&gt;&lt;/p&gt;
&lt;p&gt;Wine, watercolour&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Value Study</title>
      <link>https://yunli.nl/sketchbook/2020-07-24_value_study/</link>
      <pubDate>Fri, 24 Jul 2020 22:00:05 +0200</pubDate>
      <guid>https://yunli.nl/sketchbook/2020-07-24_value_study/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://yunli.nl/sketchbook/2020-07-24_value_study.jpg&#34; alt=&#34;Value Study&#34; title=&#34;Value Study&#34;&gt;&lt;/p&gt;
&lt;p&gt;Value study, watercolour&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Write Tests for Your Data Science Project</title>
      <link>https://yunli.nl/blogs/2020-07-03-write_tests/</link>
      <pubDate>Fri, 03 Jul 2020 13:09:00 +0200</pubDate>
      <guid>https://yunli.nl/blogs/2020-07-03-write_tests/</guid>
      <description>&lt;p&gt;I never seem to have got into the habit of writing tests as I code. That&amp;rsquo;s bad, I know.&lt;/p&gt;
&lt;p&gt;But there are so many excuses that prevents it, &amp;ldquo;oh this is just an exploratory thing&amp;rdquo;, or &amp;ldquo;Karen and Chad really needs the report/tool soon, no time for test&amp;rdquo;, or whatever else that might get in your way. Plus there&amp;rsquo;s a tendency to just use the million open-source projects out-of-the box, and expect them to do what you think they do.&lt;/p&gt;
&lt;p&gt;Sometimes they don&amp;rsquo;t work they way you had hoped, and you end up digging thought lines and lines of code hoping to find out what went wrong where. And if you&amp;rsquo;re working with particularly large datasets, just the IO along can slow you down very considerably. Or worse yet, you merrily hand over a &amp;ldquo;finished product&amp;rdquo; without even realising the bugs inside &amp;ndash; because no tests told you so! I can personally attest to this, especially those deadline-rushed projects.&lt;/p&gt;
&lt;p&gt;Well, this time I did it again. I&amp;rsquo;m about a thousand line deep into my autotrader project, when I realised my features are being scaled in inconsistent ways, that I though of &amp;ldquo;hmm, maybe there should be a test for this&amp;hellip;&amp;rdquo;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a very simple operation, take all the values of one feature in the training dataset, subtract the mean, and divide by the standard deviation.
The default behaviour of &lt;a href=&#34;https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html&#34;&gt;&lt;code&gt;sklearn.preprocessing.StandardScaler&lt;/code&gt;&lt;/a&gt; takes the population standard deviation, meaning it&amp;rsquo;s normalised by &lt;code&gt;N&lt;/code&gt;, the sample size, whereas the default behaviour of &lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.std.html&#34;&gt;&lt;code&gt;pandas.DataFrame.std&lt;/code&gt;&lt;/a&gt; calculates standard deviation with &lt;code&gt;N-1&lt;/code&gt;, which is what I expected.&lt;/p&gt;
&lt;p&gt;I went back and created a toy dataset, and wrote my own test for my functions and modules which scale different types of features. And many more tests for other functions and modules. I spent a whole week catching up with writing tests. During the process I also refactored some of my maybe-a-bit-too-long functions, so that they&amp;rsquo;re easier to test, and also easier to read.&lt;/p&gt;
&lt;p&gt;Granted, bugs are ever-elusive, and no amount of testing can ensure you don&amp;rsquo;t ever make mistakes. But I would sleep better at night. (It&amp;rsquo;s also a great feeling to watch your tests pass one by one, and the green dots appear one after another. So satisfying.)&lt;/p&gt;
&lt;p&gt;Just write some tests, it&amp;rsquo;s better late than never.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Peaches</title>
      <link>https://yunli.nl/sketchbook/2020-07-02_assholes/</link>
      <pubDate>Thu, 02 Jul 2020 21:45:03 +0200</pubDate>
      <guid>https://yunli.nl/sketchbook/2020-07-02_assholes/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://yunli.nl/sketchbook/2020-07-02_peaches.jpg&#34; alt=&#34;Peaches&#34; title=&#34;Peaches&#34;&gt;&lt;/p&gt;
&lt;p&gt;Peaches, watercolour&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Time Zone in Python - Tip of the Iceberg</title>
      <link>https://yunli.nl/blogs/2020-06-09-timezone_in_python/</link>
      <pubDate>Tue, 09 Jun 2020 14:02:50 +0200</pubDate>
      <guid>https://yunli.nl/blogs/2020-06-09-timezone_in_python/</guid>
      <description>&lt;p&gt;Time zone is such a messy subject, and I don&amp;rsquo;t even know what to start with.&lt;/p&gt;
&lt;p&gt;At my previous job I had this photo saved from a &lt;a href=&#34;https://stackoverflow.com/questions/13703720/converting-between-datetime-timestamp-and-datetime64&#34;&gt;stackoverflow answer&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.stack.imgur.com/uiXQd.png&#34; alt=&#34;time zone conversion&#34;&gt;&lt;/p&gt;
&lt;p&gt;so that every time I need to do some time zone conversion magic, I have a quick reference to go to. Because seriously, how do you expect anyone to memorize all that?&lt;/p&gt;
&lt;p&gt;Today I&amp;rsquo;m playing with some time zone stuff again for the API with my autotrader database, and encountered a new problem/feature that somehow entirely evaded my attention in the past. In a nutshell, these two code blocks produced different results, and I couldn&amp;rsquo;t understand why:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;use &lt;code&gt;tzinfo=...&lt;/code&gt; when creating a &lt;code&gt;datetime.datetime&lt;/code&gt; object&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; datetime &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; dt
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pytz &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; timezone
   
tz &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; timezone(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Europe/Amsterdam&amp;#39;&lt;/span&gt;)
dt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datetime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, tzinfo&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tz)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which produces this result:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datetime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, tzinfo&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;lt;&lt;/span&gt;DstTzInfo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Europe/Amsterdam&amp;#39;&lt;/span&gt; LMT&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; STD&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use &lt;code&gt;timezone.localize()&lt;/code&gt; on an existing &lt;code&gt;datetime.datetime&lt;/code&gt; object&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;tz &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; timezone(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Europe/Amsterdam&amp;#39;&lt;/span&gt;)
tz&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;localize(dt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datetime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which gives this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datetime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, tzinfo&lt;span style=&#34;color:#f92672&#34;&gt;=&amp;lt;&lt;/span&gt;DstTzInfo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Europe/Amsterdam&amp;#39;&lt;/span&gt; CET&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt; STD&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Why are they not the same???&lt;/p&gt;
&lt;p&gt;Answer is, method #1 returns a time offset which is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Local_mean_time&#34;&gt;Local Mean Time (LMT)&lt;/a&gt;, which is purely decided by the longitude of the location in question. On the other hand, method #2 gives the actual &lt;a href=&#34;https://en.wikipedia.org/wiki/Time_zone&#34;&gt;time zone&lt;/a&gt;, which is more of a social structure than a geological one, and that is what I wanted.&lt;/p&gt;
&lt;p&gt;Here &lt;code&gt;CET&lt;/code&gt; stands for Central European Time, which is the time zone observed in the Netherlands.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t feel like using any third-party packages like &lt;a href=&#34;https://arrow.readthedocs.io/en/latest/&#34;&gt;Arrow&lt;/a&gt; or &lt;a href=&#34;https://pendulum.eustace.io/&#34;&gt;Pendulum&lt;/a&gt;. They each have their own nice features, but integrating them with other libraries (like SQLAlchemy I&amp;rsquo;m using) sometimes is a bit messy (and more work to do).&lt;/p&gt;
&lt;p&gt;Maybe at some point I&amp;rsquo;ll end up writing a series about how I approach time zones. Part of me still hopes that we&amp;rsquo;ll all switch to UTC some time soon. Or at least, get rid of daylight saving.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Random Portrait</title>
      <link>https://yunli.nl/sketchbook/2020-06-02-portrait/</link>
      <pubDate>Tue, 02 Jun 2020 22:15:14 +0200</pubDate>
      <guid>https://yunli.nl/sketchbook/2020-06-02-portrait/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://yunli.nl/sketchbook/2020-06-02-portrait.jpeg&#34; alt=&#34;portrait&#34; title=&#34;portrait&#34;&gt;&lt;/p&gt;
&lt;p&gt;portrait sketch using an old magazine as reference, graphite pencil&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lateral Join with SQLAlchemy</title>
      <link>https://yunli.nl/blogs/2020-05-02-lateral_join_orm/</link>
      <pubDate>Tue, 02 Jun 2020 11:54:19 +0200</pubDate>
      <guid>https://yunli.nl/blogs/2020-05-02-lateral_join_orm/</guid>
      <description>&lt;p&gt;When handling timeseries data, quite often you may want to resample the data at a different frequency and use it that way.&lt;/p&gt;
&lt;p&gt;One way to achieve this is to load all data with Python, and &lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.resample.html&#34;&gt;resample&lt;/a&gt; or &lt;a href=&#34;https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.reindex.html&#34;&gt;reindex&lt;/a&gt; it with Pandas.&lt;/p&gt;
&lt;p&gt;An alternative is to query directly in SQL by using a pattern like the one below. This allows you to only get the most recent data at each sample point you&amp;rsquo;re interested in. This particular example samples the exchange rate between JPY and USD every two hours (in the actual database, I have some more recent data at 1 min intervals, and the rest at either 5 min or 30 min intervals):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; generate_series(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2020-01-01&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2020-01-15&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2 hour&amp;#39;&lt;/span&gt;::interval) sampled_at
&lt;span style=&#34;color:#66d9ef&#34;&gt;join&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;lateral&lt;/span&gt; (
    &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; alphavantage.fx f
    &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt; f.ts &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; sampled_at
    &lt;span style=&#34;color:#66d9ef&#34;&gt;and&lt;/span&gt; currency_from &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;JPY&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;and&lt;/span&gt; currency_to &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;USD&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;order&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;by&lt;/span&gt; f.ts &lt;span style=&#34;color:#66d9ef&#34;&gt;desc&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;limit&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
) p &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And since I&amp;rsquo;m down on the SQLAlchemy ORM road, why not try to write the query there as well!&lt;/p&gt;
&lt;p&gt;I found the SQLAlchemy documentation quite difficult to understand. I get the impression that to me there are many, many different ways to accomplish the same thing under this framework, and at some point I got quite overwhelmed and frustrated after reading page after page of docs that doesn&amp;rsquo;t directly answer the question I have.&lt;/p&gt;
&lt;p&gt;Then I came across this &lt;a href=&#34;https://adam-gligor.github.io/2019/11/15/sqlalchemy-subqueries/&#34;&gt;blog post&lt;/a&gt; by Adam Gligor, which really helped me comb my thoughts and finally decide on how I want to approach it.&lt;/p&gt;
&lt;p&gt;First take care of all the imports:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; datetime &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; dt

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sqlalchemy &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; and_, desc, true
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sqlalchemy.orm &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; aliased, sessionmaker
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sqlalchemy.sql &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; func
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sqlalchemy.sql.expression &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; join

&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; .constants &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; DB_ENGINE
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; .models &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; FxPrice

_Session &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sessionmaker(bind&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;DB_ENGINE)
session &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _Session()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I wrote this subquery to generate this timeseries, and aliased it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;start_ts, end_ts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datetime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;), dt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datetime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
interval &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;timedelta(hours&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
subquery_ts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
    session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(
        func&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;generate_series(start_ts, end_ts, interval)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;label(
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sampled_at&amp;#34;&lt;/span&gt;
        )
    )
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subquery()
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lateral()
)
a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; aliased(subquery_ts)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;aliased()&lt;/code&gt; function does something like this in SQL:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; some_table &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; some_alias
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It essentially allows you to give some (intermediate or temporary) table a name, so that you can reference it later again, either when joining it with another table, or joining with itself.&lt;/p&gt;
&lt;p&gt;Then I wrote another subquery to get the most recent price update at each time point I want to sample.
Note that here I compared the timestamp in &lt;code&gt;FxPrice&lt;/code&gt; table with &lt;code&gt;a.c.sampled_at&lt;/code&gt;, where &lt;code&gt;a&lt;/code&gt; is the aforementioned alias to the table created using &lt;code&gt;generate_series&lt;/code&gt;.
(The &lt;code&gt;.c&lt;/code&gt; in &lt;code&gt;a.c&lt;/code&gt; is for &lt;code&gt;columns&lt;/code&gt;, so &lt;code&gt;a.c.sampled_at&lt;/code&gt; gets you the column named &lt;code&gt;sampled_at&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;Without the aliasing I wouldn&amp;rsquo;t be able to achieve this effect; instead it would create a nested subquery and that&amp;rsquo;s not what I want.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;subquery_price &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
    session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(FxPrice)
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filter(
        and_(
            FxPrice&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ts &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; a&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sampled_at,
            FxPrice&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;currency_from &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;JPY&amp;#34;&lt;/span&gt;,
            FxPrice&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;currency_to &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;USD&amp;#34;&lt;/span&gt;,
        )
    )
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;order_by(desc(FxPrice&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ts))
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;limit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;subquery()
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;lateral()
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, putting everything together:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (
    session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;query(
        subquery_price&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ts,
        a,
        subquery_price&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;currency_from,
        subquery_price&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;currency_to,
        subquery_price&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;price,
    )
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;select_from(a)
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(subquery_price, true())
    &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;all()
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which actually produces the following query:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; anon_1.ts, anon_2.sampled_at, anon_1.currency_from, anon_1.currency_to, anon_1.price
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; (
    &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; generate_series(:generate_series_1, :generate_series_2, :generate_series_3) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; sampled_at
    ) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; anon_2
&lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;LATERAL&lt;/span&gt; (
    &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; alphavantage.fx.created_at &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; created_at, alphavantage.fx.ts &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; ts, alphavantage.fx.currency_from &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; currency_from, alphavantage.fx.currency_to &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; currency_to, alphavantage.fx.price &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; price
    &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; alphavantage.fx
    &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; alphavantage.fx.ts &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; anon_2.sampled_at
    &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; alphavantage.fx.currency_from &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; :currency_from_1
    &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; alphavantage.fx.currency_to &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; :currency_to_1
    &lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; alphavantage.fx.ts &lt;span style=&#34;color:#66d9ef&#34;&gt;DESC&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;LIMIT&lt;/span&gt; :param_1
    ) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; anon_1
&lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where the parameters are:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;generate_series_1&amp;#39;&lt;/span&gt;: datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datetime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;),
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;generate_series_2&amp;#39;&lt;/span&gt;: datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;datetime(&lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;),
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;generate_series_3&amp;#39;&lt;/span&gt;: datetime&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;timedelta(seconds&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7200&lt;/span&gt;),
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;currency_from_1&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;JPY&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;currency_to_1&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;USD&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;param_1&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Bay Leaf</title>
      <link>https://yunli.nl/sketchbook/2020-05-30-bay_leaf/</link>
      <pubDate>Sat, 30 May 2020 22:12:14 +0200</pubDate>
      <guid>https://yunli.nl/sketchbook/2020-05-30-bay_leaf/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://yunli.nl/sketchbook/2020-05-30-bay_leaf.jpeg&#34; alt=&#34;bay leaf&#34; title=&#34;bay leaf&#34;&gt;&lt;/p&gt;
&lt;p&gt;bay leaf from biryani, watercolour&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Schema Names: SQLAlchemy and Alembic</title>
      <link>https://yunli.nl/blogs/2020-05-28-schema_name/</link>
      <pubDate>Thu, 28 May 2020 11:54:19 +0200</pubDate>
      <guid>https://yunli.nl/blogs/2020-05-28-schema_name/</guid>
      <description>&lt;p&gt;I recently started working on my own autotrader. There&amp;rsquo;s still much to be done, but I&amp;rsquo;ve finished the first step &amp;ndash; collecting data and put them in a database. I&amp;rsquo;ve got a PostgreSQL server running on Docker, and a script that reads data using the &lt;a href=&#34;https://www.alphavantage.co/documentation/&#34;&gt;AlphaVantage API&lt;/a&gt; and writes to my database.&lt;/p&gt;
&lt;p&gt;The next step would be to write my own Python API to query data from the database. The easy way for me would be to stick a bunch of SQL queries in some python functions, but why do that when you can make life more complicated! I&amp;rsquo;ve been wanting to learn about &lt;a href=&#34;https://en.wikipedia.org/wiki/Object-relational_mapping&#34;&gt;ORM&lt;/a&gt;, and decided this would be my chance to try it out with SQLAlchemy.&lt;/p&gt;
&lt;h2 id=&#34;foreign-keys&#34;&gt;foreign keys&lt;/h2&gt;
&lt;p&gt;I first created these models:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sqlalchemy &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Column, ForeignKey
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sqlalchemy.dialects.postgresql &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; DOUBLE_PRECISION, TEXT, TIMESTAMP
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sqlalchemy.ext.declarative &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; declarative_base
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; sqlalchemy.orm &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; relationship

Base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; declarative_base()

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ModelMixin&lt;/span&gt;:
    __table_args__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alphavantage&amp;#34;&lt;/span&gt;}
    created_at &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Column(TIMESTAMP(timezone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True))

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Currency&lt;/span&gt;(Base, ModelMixin):
    __tablename__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;currencies&amp;#34;&lt;/span&gt;
    currency &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Column(TEXT, primary_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)

&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FxPrice&lt;/span&gt;(Base, ModelMixin):
    __tablename__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fx&amp;#34;&lt;/span&gt;
    ts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Column(TIMESTAMP(timezone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True), primary_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
    currency_from &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Column(
        TEXT, ForeignKey(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;currencies.currency&amp;#34;&lt;/span&gt;), primary_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True
    )
    currency_to &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Column(
        TEXT, ForeignKey(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;currencies.currency&amp;#34;&lt;/span&gt;), primary_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True
    )
    price &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Column(DOUBLE_PRECISION)

    _currency_from &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Currency&amp;#34;&lt;/span&gt;, foreign_keys&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[currency_from])
    _currency_to &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; relationship(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Currency&amp;#34;&lt;/span&gt;, foreign_keys&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[currency_to])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With an existing database, my goal is to reproduce the tables with a SQLAlchemy model, so I can interact with the database through this bit of Python code.&lt;/p&gt;
&lt;p&gt;But it didn&amp;rsquo;t work, and kept producing this error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sqlalchemy.exc.NoReferencedTableError: Foreign key associated with column &#39;fx.currency_from&#39; could not find table &#39;currencies&#39; with which to generate a foreign key to target column &#39;currency&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After much digging, I found this is because the tables are not in the default &lt;code&gt;public&lt;/code&gt; schema, and the solution is to specify schema name while declaring the columns with foreign keys:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    currency_from &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Column(
        TEXT, ForeignKey(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alphavantage.currencies.currency&amp;#34;&lt;/span&gt;), primary_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True
    )
    currency_to &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Column(
        TEXT, ForeignKey(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alphavantage.currencies.currency&amp;#34;&lt;/span&gt;), primary_key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True
    )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;alembic&#34;&gt;alembic&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://alembic.sqlalchemy.org/en/latest/&#34;&gt;Alembic&lt;/a&gt; is a tool for helping with database migrations. It helps tie together your SQLAlchemy models with tables in your database, so that any change you make in your ORM model (e.g. add a column, introduce a new table, etc) will be automatically reflected in your databse.&lt;/p&gt;
&lt;p&gt;It was quite easy to set up, but when I ran&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alembic revision --autogenerate
alembic upgrade head --sql
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;to try it out, it ended up trying to create two new tables in my database &lt;code&gt;public.&amp;quot;alphavantage.currencies&amp;quot;&lt;/code&gt; and &lt;code&gt;public.&amp;quot;alphavantage.fx&amp;quot;&lt;/code&gt;. The expected behaviour is to do nothing, because those two tables already exist in my database.&lt;/p&gt;
&lt;p&gt;Apparenly, by default, alembic only discovers tables in the default schema. In this case the tables are in a different &lt;code&gt;alphavantage&lt;/code&gt; schema, and that caused some confusion.&lt;/p&gt;
&lt;p&gt;To change its default behaviour, locate the &lt;code&gt;env.py&lt;/code&gt; file in &lt;code&gt;./alembic&lt;/code&gt;, and add this line&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;include_schemas&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;in the bit about&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;configure()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;of both of these two functions&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run_migrations_offline&lt;/span&gt;():
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run_migrations_online&lt;/span&gt;()
    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;conclusion&lt;/h2&gt;
&lt;p&gt;Maybe check your schema names when SQLAlchemy can&amp;rsquo;t seem find a table that actually exists!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sunflower</title>
      <link>https://yunli.nl/sketchbook/2020-05-24-sunflower/</link>
      <pubDate>Sun, 24 May 2020 20:12:14 +0200</pubDate>
      <guid>https://yunli.nl/sketchbook/2020-05-24-sunflower/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://yunli.nl/sketchbook/2020-05-24-sunflower.jpeg&#34; alt=&#34;sunflower&#34; title=&#34;sunflower&#34;&gt;&lt;/p&gt;
&lt;p&gt;sunflower, watercolour&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Parakeet</title>
      <link>https://yunli.nl/sketchbook/2020-05-10-parakeet/</link>
      <pubDate>Sun, 10 May 2020 21:12:14 +0200</pubDate>
      <guid>https://yunli.nl/sketchbook/2020-05-10-parakeet/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://yunli.nl/sketchbook/2020-05-10-parakeet.jpg&#34; alt=&#34;parakeet&#34; title=&#34;parakeet&#34;&gt;&lt;/p&gt;
&lt;p&gt;parakeet, watercolour&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://yunli.nl/about/</link>
      <pubDate>Thu, 23 Apr 2020 17:12:14 +0200</pubDate>
      <guid>https://yunli.nl/about/</guid>
      <description>&lt;p&gt;Hi, I&amp;rsquo;m Yun, and welcome to my site.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m a data scientist, and I also like tinkering with things, taking photos, and drawing. Here&amp;rsquo;s one of the corners where I document what I do.&lt;/p&gt;
&lt;p&gt;For business inquiries, please visit &lt;a href=&#34;https://amphibiousunicorns.com&#34;&gt;AmphibiousUnicorns.com&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;work--study&#34;&gt;work &amp;amp; study&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.optiver.com/eu/en/&#34;&gt;Optiver&lt;/a&gt; (2017-2020)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://amolf.nl/&#34;&gt;AMOLF&lt;/a&gt; (2016-2017)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.xtalpi.com/en/&#34;&gt;XtalPi&lt;/a&gt; (2015)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.auc.nl/&#34;&gt;Amsterdam University College&lt;/a&gt; (2014-2017)
&lt;ul&gt;
&lt;li&gt;BSc. liberal arts and sciences, focus on physics&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hkbu.edu.hk/eng/main/index.jsp&#34;&gt;Hong Kong Baptist University&lt;/a&gt; (2012-2014)
&lt;ul&gt;
&lt;li&gt;unfinished BSc. applied and computational mathematics&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;social--contact&#34;&gt;social &amp;amp; contact&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/MotherOfUnicorns&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/in/yun-li/&#34;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.instagram.com/yunthemotherofunicorns/&#34;&gt;Instagram&lt;/a&gt;, another &lt;a href=&#34;https://www.instagram.com/uselessplasticwraps/&#34;&gt;Instagram&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flickr.com/photos/40302242@N08/&#34;&gt;flickr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodreads.com/meiyousonghuadan&#34;&gt;goodreads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:liyun.elf%5B_at_%5Dgmail.com&#34;&gt;email&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://yunli.nl/blogs/2020-04-23-first_post/</link>
      <pubDate>Thu, 23 Apr 2020 17:12:14 +0200</pubDate>
      <guid>https://yunli.nl/blogs/2020-04-23-first_post/</guid>
      <description>&lt;p&gt;Building my site.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
